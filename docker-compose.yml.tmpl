---
services:
  proxy:
    image: 'registry.coolblock.com/coolblock/panel-proxy:__PANEL_PROXY_VERSION__'
    command:
      - '--global.checkNewVersion=false'
      - '--global.sendAnonymousUsage=false'
      - '--ping'
      - '--api.insecure=true'
      - '--api.dashboard=true'
      - '--providers.docker'
      - '--providers.file.directory=/etc/traefik'
      - '--providers.file.watch=true'
      - '--accesslog=true'
      - '--accesslog.format=json'
      - '--entrypoints.web.address=:80'
      - '--entrypoints.websecure.address=:443'
      - '--entrypoints.influxdb.address=:8086'
      # - '--entrypoints.backend.address=:8443'  ## uncomment this to expose internal API (insecure)
    ports:
      - '80:80'
      - '10080:80'
      - '443:443/tcp'
      - '443:443/udp'
      - '10443:443/tcp'
      - '10443:443/udp'
      - '8086:8086'
      # - '8443:8443'  ## uncomment this to expose internal API (insecure)
    volumes:
      - '/var/run/docker.sock:/var/run/docker.sock:ro'
      - '/home/coolblock/panel/certs:/coolblock-panel-certs:rw'
    healthcheck:
      test: ['CMD', 'traefik', 'healthcheck', '--ping']
      interval: '30s'
      timeout: '5s'
      retries: 3
      start_period: '0s'
      start_interval: '5s'
    deploy:
      replicas: 1
      restart_policy:
        condition: 'on-failure'
    networks:
      - 'coolblock-panel'

  frontend:
    image: 'registry.coolblock.com/coolblock/panel-web:__PANEL_WEB_VERSION__'
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.frontend.rule=PathPrefix(`/`)'
      - 'traefik.http.routers.frontend.entrypoints=websecure'
      - 'traefik.http.routers.frontend.tls=true'
      - 'traefik.http.routers.frontend-redirect.rule=PathPrefix(`/`)'
      - 'traefik.http.routers.frontend-redirect.entrypoints=web'
      - 'traefik.http.routers.frontend-redirect.middlewares=redirect-to-https'
      - 'traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https'
      - 'traefik.http.services.frontend.loadbalancer.server.port=3000'
    env_file:
      - '.env'
    depends_on:
      mysql:
        condition: 'service_healthy'
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000/login.html']
      interval: '30s'
      timeout: '5s'
      retries: 3
      start_period: '0s'
      start_interval: '5s'
    deploy:
      replicas: 3
      restart_policy:
        condition: 'on-failure'
    networks:
      - 'coolblock-panel'

  mysql:
    image: 'mysql:9'
    command: 'command: --event-scheduler=ON'
    env_file:
      - '.env'
    volumes:
      - 'coolblock-panel-web-database-data:/var/lib/mysql:rw'
      - './init.sql:/docker-entrypoint-initdb.d/init.sql:ro'
    ports:
      - '127.0.0.1:3306:3306'
    healthcheck:
      test: ['CMD', 'mysqladmin', 'ping', '-h', 'localhost', '-p$$(env | awk -F= "/MYSQL_ROOT_PASSWORD/{print $$2}")']
      interval: '30s'
      timeout: '5s'
      retries: 3
      start_period: '0s'
      start_interval: '5s'
    deploy:
      replicas: 1
      restart_policy:
        condition: 'on-failure'
    networks:
      - 'coolblock-panel'

  backend:
    image: 'registry.coolblock.com/coolblock/panel-api:__PANEL_API_VERSION__'
    ## uncomment the below to expose internal API (insecure)
    # labels:
    #   - 'traefik.enable=true'
    #   - 'traefik.http.routers.backend.rule=PathPrefix(`/backend`)'
    #   - 'traefik.http.routers.backend.entrypoints=backend'
    #   - 'traefik.http.routers.backend.tls=true'
    #   - 'traefik.http.services.backend.loadbalancer.server.port=8080'
    env_file:
      - '.env'
    depends_on:
      mysql:
        condition: 'service_healthy'
      influxdb:
        condition: 'service_healthy'
      redis:
        condition: 'service_healthy'
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8080/backend/health']
      interval: '30s'
      timeout: '5s'
      retries: 3
      start_period: '0s'
      start_interval: '5s'
    deploy:
      replicas: 3
      restart_policy:
        condition: 'on-failure'
    networks:
      - 'coolblock-panel'

  worker-influxdb-read:
    image: 'registry.coolblock.com/coolblock/panel-api:__PANEL_API_VERSION__'
    command:
      [
        'celery',
        '-A',
        'app.tasks.celery_app.celery_app',
        'worker',
        '--loglevel=info',
        '--concurrency=8',
        '-E',
        '-Q',
        'influxdb.read',
      ]
    env_file:
      - '.env'
    depends_on:
      mysql:
        condition: 'service_healthy'
      influxdb:
        condition: 'service_healthy'
      redis:
        condition: 'service_healthy'
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'celery',
          'inspect',
          'ping',
          '--destination',
          'celery@$$HOSTNAME',
        ]
      interval: '30s'
      timeout: '5s'
      retries: 3
      start_period: '0s'
      start_interval: '5s'
    deploy:
      replicas: 3
      restart_policy:
        condition: 'on-failure'
    networks:
      - 'coolblock-panel'

  worker-influxdb-write:
    image: 'registry.coolblock.com/coolblock/panel-api:__PANEL_API_VERSION__'
    command:
      [
        'celery',
        '-A',
        'app.tasks.celery_app.celery_app',
        'worker',
        '--loglevel=info',
        '--concurrency=1',
        '-E',
        '-Q',
        'influxdb.write',
      ]
    env_file:
      - '.env'
    depends_on:
      mysql:
        condition: 'service_healthy'
      influxdb:
        condition: 'service_healthy'
      redis:
        condition: 'service_healthy'
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'celery',
          'inspect',
          'ping',
          '--destination',
          'celery@$$HOSTNAME',
        ]
      interval: '30s'
      timeout: '5s'
      retries: 3
      start_period: '0s'
      start_interval: '5s'
    deploy:
      replicas: 3
      restart_policy:
        condition: 'on-failure'
    networks:
      - 'coolblock-panel'

  worker-plc-read:
    image: 'registry.coolblock.com/coolblock/panel-api:__PANEL_API_VERSION__'
    command:
      [
        'celery',
        '-A',
        'app.tasks.celery_app.celery_app',
        'worker',
        '--loglevel=info',
        '--concurrency=4',
        '-E',
        '-Q',
        'plc.read',
      ]
    env_file:
      - '.env'
    depends_on:
      mysql:
        condition: 'service_healthy'
      influxdb:
        condition: 'service_healthy'
      redis:
        condition: 'service_healthy'
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'celery',
          'inspect',
          'ping',
          '--destination',
          'celery@$$HOSTNAME',
        ]
      interval: '30s'
      timeout: '5s'
      retries: 3
      start_period: '0s'
      start_interval: '5s'
    deploy:
      replicas: 3
      restart_policy:
        condition: 'on-failure'
    networks:
      - 'coolblock-panel'

  worker-plc-write:
    image: 'registry.coolblock.com/coolblock/panel-api:__PANEL_API_VERSION__'
    command:
      [
        'celery',
        '-A',
        'app.tasks.celery_app.celery_app',
        'worker',
        '--loglevel=info',
        '--concurrency=1',
        '-E',
        '-Q',
        'plc.write',
      ]
    env_file:
      - '.env'
    depends_on:
      mysql:
        condition: 'service_healthy'
      influxdb:
        condition: 'service_healthy'
      redis:
        condition: 'service_healthy'
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'celery',
          'inspect',
          'ping',
          '--destination',
          'celery@$$HOSTNAME',
        ]
      interval: '30s'
      timeout: '5s'
      retries: 3
      start_period: '0s'
      start_interval: '5s'
    deploy:
      replicas: 3
      restart_policy:
        condition: 'on-failure'
    networks:
      - 'coolblock-panel'

  worker-alert-checker:
    image: 'registry.coolblock.com/coolblock/panel-api:__PANEL_API_VERSION__'
    command:
      [
        'celery',
        '-A',
        'app.tasks.celery_app.celery_app',
        'worker',
        '--loglevel=info',
        '--concurrency=1',
        '-E',
        '-Q',
        'alert.checker'
      ]
    env_file:
      - '.env'
    depends_on:
      mysql:
        condition: 'service_healthy'
      influxdb:
        condition: 'service_healthy'
      redis:
        condition: 'service_healthy'
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'celery',
          'inspect',
          'ping',
          '--destination',
          'celery@$$HOSTNAME',
        ]
      interval: '30s'
      timeout: '5s'
      retries: 3
      start_period: '0s'
      start_interval: '5s'
    deploy:
      replicas: 3
      restart_policy:
        condition: 'on-failure'
    networks:
      - 'coolblock-panel'

  worker-alert-notifier:
    image: 'registry.coolblock.com/coolblock/panel-api:__PANEL_API_VERSION__'
    command:
      [
        'celery',
        '-A',
        'app.tasks.celery_app.celery_app',
        'worker',
        '--loglevel=info',
        '--concurrency=1',
        '-E',
        '-Q',
        'alert.notifier'
      ]
    env_file:
      - '.env'
    depends_on:
      mysql:
        condition: 'service_healthy'
      influxdb:
        condition: 'service_healthy'
      redis:
        condition: 'service_healthy'
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'celery',
          'inspect',
          'ping',
          '--destination',
          'celery@$$HOSTNAME',
        ]
      interval: '30s'
      timeout: '5s'
      retries: 3
      start_period: '0s'
      start_interval: '5s'
    deploy:
      replicas: 3
      restart_policy:
        condition: 'on-failure'
    networks:
      - 'coolblock-panel'

  scheduler:
    image: 'registry.coolblock.com/coolblock/panel-api:__PANEL_API_VERSION__'
    command:
      [
        'celery',
        '-A',
        'app.tasks.celery_app.celery_app',
        'beat',
        '--loglevel=info',
      ]
    env_file:
      - '.env'
    depends_on:
      mysql:
        condition: 'service_healthy'
      influxdb:
        condition: 'service_healthy'
      redis:
        condition: 'service_healthy'
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'celery',
          'inspect',
          'ping',
          '--destination',
          'celery@$$HOSTNAME',
        ]
      interval: '30s'
      timeout: '5s'
      retries: 3
      start_period: '0s'
      start_interval: '5s'
    deploy:
      replicas: 1
      restart_policy:
        condition: 'on-failure'
    networks:
      - 'coolblock-panel'

  redis:
    image: 'redis:latest'
    healthcheck:
      test: ['CMD-SHELL', 'redis-cli', 'ping']
      interval: '30s'
      timeout: '5s'
      retries: 3
      start_period: '0s'
      start_interval: '5s'
    deploy:
      replicas: 1
      restart_policy:
        condition: 'on-failure'
    networks:
      - 'coolblock-panel'

  influxdb:
    image: 'influxdb:2'
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.influxdb.rule=PathPrefix(`/`)'
      - 'traefik.http.routers.influxdb.entrypoints=influxdb'
      - 'traefik.http.routers.influxdb.tls=true'
      - 'traefik.http.services.influxdb.loadbalancer.server.port=8086'
    env_file:
      - '.env'
    healthcheck:
      test: ['CMD', 'curl', '-fsL', 'http://localhost:8086/ping']
      interval: '30s'
      timeout: '5s'
      retries: 3
      start_period: '0s'
      start_interval: '5s'
    deploy:
      replicas: 1
      restart_policy:
        condition: 'on-failure'
    networks:
      - 'coolblock-panel'

  tunnel:
    image: "registry.coolblock.com/coolblock/tunnel:latest"
    env_file:
      - '.env'
    volumes:
      - "coolblock-panel-tunnel-data:/ziti-edge-tunnel"
    deploy:
      replicas: 1
      restart_policy:
        condition: 'any'
    network_mode: 'host'

volumes:
  coolblock-panel-web-database-data:
  coolblock-panel-tunnel-data:

networks:
  coolblock-panel:
    external: true
